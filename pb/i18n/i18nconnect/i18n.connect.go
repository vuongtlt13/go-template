// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: i18n/i18n.proto

package i18nconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	i18n "yourapp/pb/i18n"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// I18nServiceName is the fully-qualified name of the I18nService service.
	I18nServiceName = "yourapp.i18n.I18nService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// I18NServiceGetTranslationsProcedure is the fully-qualified name of the I18nService's
	// GetTranslations RPC.
	I18NServiceGetTranslationsProcedure = "/yourapp.i18n.I18nService/GetTranslations"
)

// I18NServiceClient is a client for the yourapp.i18n.I18nService service.
type I18NServiceClient interface {
	// GetTranslations returns all translations for a specific language
	GetTranslations(context.Context, *connect.Request[i18n.GetTranslationsRequest]) (*connect.Response[i18n.GetTranslationsResponse], error)
}

// NewI18NServiceClient constructs a client for the yourapp.i18n.I18nService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewI18NServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) I18NServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	i18NServiceMethods := i18n.File_i18n_i18n_proto.Services().ByName("I18nService").Methods()
	return &i18NServiceClient{
		getTranslations: connect.NewClient[i18n.GetTranslationsRequest, i18n.GetTranslationsResponse](
			httpClient,
			baseURL+I18NServiceGetTranslationsProcedure,
			connect.WithSchema(i18NServiceMethods.ByName("GetTranslations")),
			connect.WithClientOptions(opts...),
		),
	}
}

// i18NServiceClient implements I18NServiceClient.
type i18NServiceClient struct {
	getTranslations *connect.Client[i18n.GetTranslationsRequest, i18n.GetTranslationsResponse]
}

// GetTranslations calls yourapp.i18n.I18nService.GetTranslations.
func (c *i18NServiceClient) GetTranslations(ctx context.Context, req *connect.Request[i18n.GetTranslationsRequest]) (*connect.Response[i18n.GetTranslationsResponse], error) {
	return c.getTranslations.CallUnary(ctx, req)
}

// I18NServiceHandler is an implementation of the yourapp.i18n.I18nService service.
type I18NServiceHandler interface {
	// GetTranslations returns all translations for a specific language
	GetTranslations(context.Context, *connect.Request[i18n.GetTranslationsRequest]) (*connect.Response[i18n.GetTranslationsResponse], error)
}

// NewI18NServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewI18NServiceHandler(svc I18NServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	i18NServiceMethods := i18n.File_i18n_i18n_proto.Services().ByName("I18nService").Methods()
	i18NServiceGetTranslationsHandler := connect.NewUnaryHandler(
		I18NServiceGetTranslationsProcedure,
		svc.GetTranslations,
		connect.WithSchema(i18NServiceMethods.ByName("GetTranslations")),
		connect.WithHandlerOptions(opts...),
	)
	return "/yourapp.i18n.I18nService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case I18NServiceGetTranslationsProcedure:
			i18NServiceGetTranslationsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedI18NServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedI18NServiceHandler struct{}

func (UnimplementedI18NServiceHandler) GetTranslations(context.Context, *connect.Request[i18n.GetTranslationsRequest]) (*connect.Response[i18n.GetTranslationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.i18n.I18nService.GetTranslations is not implemented"))
}
