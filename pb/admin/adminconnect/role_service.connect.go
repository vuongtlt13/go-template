// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/role_service.proto

package adminconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	admin "yourapp/pb/admin"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoleServiceName is the fully-qualified name of the RoleService service.
	RoleServiceName = "yourapp.admin.RoleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoleServiceCreateRoleProcedure is the fully-qualified name of the RoleService's CreateRole RPC.
	RoleServiceCreateRoleProcedure = "/yourapp.admin.RoleService/CreateRole"
	// RoleServiceGetRoleProcedure is the fully-qualified name of the RoleService's GetRole RPC.
	RoleServiceGetRoleProcedure = "/yourapp.admin.RoleService/GetRole"
	// RoleServiceUpdateRoleProcedure is the fully-qualified name of the RoleService's UpdateRole RPC.
	RoleServiceUpdateRoleProcedure = "/yourapp.admin.RoleService/UpdateRole"
	// RoleServiceDeleteRoleProcedure is the fully-qualified name of the RoleService's DeleteRole RPC.
	RoleServiceDeleteRoleProcedure = "/yourapp.admin.RoleService/DeleteRole"
	// RoleServiceListRolesProcedure is the fully-qualified name of the RoleService's ListRoles RPC.
	RoleServiceListRolesProcedure = "/yourapp.admin.RoleService/ListRoles"
)

// RoleServiceClient is a client for the yourapp.admin.RoleService service.
type RoleServiceClient interface {
	CreateRole(context.Context, *connect.Request[admin.CreateRoleRequest]) (*connect.Response[admin.RoleResponse], error)
	GetRole(context.Context, *connect.Request[admin.GetRoleRequest]) (*connect.Response[admin.RoleResponse], error)
	UpdateRole(context.Context, *connect.Request[admin.UpdateRoleRequest]) (*connect.Response[admin.RoleResponse], error)
	DeleteRole(context.Context, *connect.Request[admin.DeleteRoleRequest]) (*connect.Response[admin.DeleteRoleResponse], error)
	ListRoles(context.Context, *connect.Request[admin.ListRolesRequest]) (*connect.Response[admin.ListRolesResponse], error)
}

// NewRoleServiceClient constructs a client for the yourapp.admin.RoleService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	roleServiceMethods := admin.File_admin_role_service_proto.Services().ByName("RoleService").Methods()
	return &roleServiceClient{
		createRole: connect.NewClient[admin.CreateRoleRequest, admin.RoleResponse](
			httpClient,
			baseURL+RoleServiceCreateRoleProcedure,
			connect.WithSchema(roleServiceMethods.ByName("CreateRole")),
			connect.WithClientOptions(opts...),
		),
		getRole: connect.NewClient[admin.GetRoleRequest, admin.RoleResponse](
			httpClient,
			baseURL+RoleServiceGetRoleProcedure,
			connect.WithSchema(roleServiceMethods.ByName("GetRole")),
			connect.WithClientOptions(opts...),
		),
		updateRole: connect.NewClient[admin.UpdateRoleRequest, admin.RoleResponse](
			httpClient,
			baseURL+RoleServiceUpdateRoleProcedure,
			connect.WithSchema(roleServiceMethods.ByName("UpdateRole")),
			connect.WithClientOptions(opts...),
		),
		deleteRole: connect.NewClient[admin.DeleteRoleRequest, admin.DeleteRoleResponse](
			httpClient,
			baseURL+RoleServiceDeleteRoleProcedure,
			connect.WithSchema(roleServiceMethods.ByName("DeleteRole")),
			connect.WithClientOptions(opts...),
		),
		listRoles: connect.NewClient[admin.ListRolesRequest, admin.ListRolesResponse](
			httpClient,
			baseURL+RoleServiceListRolesProcedure,
			connect.WithSchema(roleServiceMethods.ByName("ListRoles")),
			connect.WithClientOptions(opts...),
		),
	}
}

// roleServiceClient implements RoleServiceClient.
type roleServiceClient struct {
	createRole *connect.Client[admin.CreateRoleRequest, admin.RoleResponse]
	getRole    *connect.Client[admin.GetRoleRequest, admin.RoleResponse]
	updateRole *connect.Client[admin.UpdateRoleRequest, admin.RoleResponse]
	deleteRole *connect.Client[admin.DeleteRoleRequest, admin.DeleteRoleResponse]
	listRoles  *connect.Client[admin.ListRolesRequest, admin.ListRolesResponse]
}

// CreateRole calls yourapp.admin.RoleService.CreateRole.
func (c *roleServiceClient) CreateRole(ctx context.Context, req *connect.Request[admin.CreateRoleRequest]) (*connect.Response[admin.RoleResponse], error) {
	return c.createRole.CallUnary(ctx, req)
}

// GetRole calls yourapp.admin.RoleService.GetRole.
func (c *roleServiceClient) GetRole(ctx context.Context, req *connect.Request[admin.GetRoleRequest]) (*connect.Response[admin.RoleResponse], error) {
	return c.getRole.CallUnary(ctx, req)
}

// UpdateRole calls yourapp.admin.RoleService.UpdateRole.
func (c *roleServiceClient) UpdateRole(ctx context.Context, req *connect.Request[admin.UpdateRoleRequest]) (*connect.Response[admin.RoleResponse], error) {
	return c.updateRole.CallUnary(ctx, req)
}

// DeleteRole calls yourapp.admin.RoleService.DeleteRole.
func (c *roleServiceClient) DeleteRole(ctx context.Context, req *connect.Request[admin.DeleteRoleRequest]) (*connect.Response[admin.DeleteRoleResponse], error) {
	return c.deleteRole.CallUnary(ctx, req)
}

// ListRoles calls yourapp.admin.RoleService.ListRoles.
func (c *roleServiceClient) ListRoles(ctx context.Context, req *connect.Request[admin.ListRolesRequest]) (*connect.Response[admin.ListRolesResponse], error) {
	return c.listRoles.CallUnary(ctx, req)
}

// RoleServiceHandler is an implementation of the yourapp.admin.RoleService service.
type RoleServiceHandler interface {
	CreateRole(context.Context, *connect.Request[admin.CreateRoleRequest]) (*connect.Response[admin.RoleResponse], error)
	GetRole(context.Context, *connect.Request[admin.GetRoleRequest]) (*connect.Response[admin.RoleResponse], error)
	UpdateRole(context.Context, *connect.Request[admin.UpdateRoleRequest]) (*connect.Response[admin.RoleResponse], error)
	DeleteRole(context.Context, *connect.Request[admin.DeleteRoleRequest]) (*connect.Response[admin.DeleteRoleResponse], error)
	ListRoles(context.Context, *connect.Request[admin.ListRolesRequest]) (*connect.Response[admin.ListRolesResponse], error)
}

// NewRoleServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoleServiceHandler(svc RoleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	roleServiceMethods := admin.File_admin_role_service_proto.Services().ByName("RoleService").Methods()
	roleServiceCreateRoleHandler := connect.NewUnaryHandler(
		RoleServiceCreateRoleProcedure,
		svc.CreateRole,
		connect.WithSchema(roleServiceMethods.ByName("CreateRole")),
		connect.WithHandlerOptions(opts...),
	)
	roleServiceGetRoleHandler := connect.NewUnaryHandler(
		RoleServiceGetRoleProcedure,
		svc.GetRole,
		connect.WithSchema(roleServiceMethods.ByName("GetRole")),
		connect.WithHandlerOptions(opts...),
	)
	roleServiceUpdateRoleHandler := connect.NewUnaryHandler(
		RoleServiceUpdateRoleProcedure,
		svc.UpdateRole,
		connect.WithSchema(roleServiceMethods.ByName("UpdateRole")),
		connect.WithHandlerOptions(opts...),
	)
	roleServiceDeleteRoleHandler := connect.NewUnaryHandler(
		RoleServiceDeleteRoleProcedure,
		svc.DeleteRole,
		connect.WithSchema(roleServiceMethods.ByName("DeleteRole")),
		connect.WithHandlerOptions(opts...),
	)
	roleServiceListRolesHandler := connect.NewUnaryHandler(
		RoleServiceListRolesProcedure,
		svc.ListRoles,
		connect.WithSchema(roleServiceMethods.ByName("ListRoles")),
		connect.WithHandlerOptions(opts...),
	)
	return "/yourapp.admin.RoleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoleServiceCreateRoleProcedure:
			roleServiceCreateRoleHandler.ServeHTTP(w, r)
		case RoleServiceGetRoleProcedure:
			roleServiceGetRoleHandler.ServeHTTP(w, r)
		case RoleServiceUpdateRoleProcedure:
			roleServiceUpdateRoleHandler.ServeHTTP(w, r)
		case RoleServiceDeleteRoleProcedure:
			roleServiceDeleteRoleHandler.ServeHTTP(w, r)
		case RoleServiceListRolesProcedure:
			roleServiceListRolesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoleServiceHandler struct{}

func (UnimplementedRoleServiceHandler) CreateRole(context.Context, *connect.Request[admin.CreateRoleRequest]) (*connect.Response[admin.RoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.admin.RoleService.CreateRole is not implemented"))
}

func (UnimplementedRoleServiceHandler) GetRole(context.Context, *connect.Request[admin.GetRoleRequest]) (*connect.Response[admin.RoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.admin.RoleService.GetRole is not implemented"))
}

func (UnimplementedRoleServiceHandler) UpdateRole(context.Context, *connect.Request[admin.UpdateRoleRequest]) (*connect.Response[admin.RoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.admin.RoleService.UpdateRole is not implemented"))
}

func (UnimplementedRoleServiceHandler) DeleteRole(context.Context, *connect.Request[admin.DeleteRoleRequest]) (*connect.Response[admin.DeleteRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.admin.RoleService.DeleteRole is not implemented"))
}

func (UnimplementedRoleServiceHandler) ListRoles(context.Context, *connect.Request[admin.ListRolesRequest]) (*connect.Response[admin.ListRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.admin.RoleService.ListRoles is not implemented"))
}
