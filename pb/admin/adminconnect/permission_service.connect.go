// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/permission_service.proto

package adminconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
	admin "yourapp/pb/admin"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PermissionServiceName is the fully-qualified name of the PermissionService service.
	PermissionServiceName = "yourapp.admin.PermissionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PermissionServiceCreatePermissionProcedure is the fully-qualified name of the PermissionService's
	// CreatePermission RPC.
	PermissionServiceCreatePermissionProcedure = "/yourapp.admin.PermissionService/CreatePermission"
	// PermissionServiceGetPermissionProcedure is the fully-qualified name of the PermissionService's
	// GetPermission RPC.
	PermissionServiceGetPermissionProcedure = "/yourapp.admin.PermissionService/GetPermission"
	// PermissionServiceUpdatePermissionProcedure is the fully-qualified name of the PermissionService's
	// UpdatePermission RPC.
	PermissionServiceUpdatePermissionProcedure = "/yourapp.admin.PermissionService/UpdatePermission"
	// PermissionServiceDeletePermissionProcedure is the fully-qualified name of the PermissionService's
	// DeletePermission RPC.
	PermissionServiceDeletePermissionProcedure = "/yourapp.admin.PermissionService/DeletePermission"
	// PermissionServiceListPermissionsProcedure is the fully-qualified name of the PermissionService's
	// ListPermissions RPC.
	PermissionServiceListPermissionsProcedure = "/yourapp.admin.PermissionService/ListPermissions"
)

// PermissionServiceClient is a client for the yourapp.admin.PermissionService service.
type PermissionServiceClient interface {
	CreatePermission(context.Context, *connect.Request[admin.CreatePermissionRequest]) (*connect.Response[admin.PermissionResponse], error)
	GetPermission(context.Context, *connect.Request[admin.GetPermissionRequest]) (*connect.Response[admin.PermissionResponse], error)
	UpdatePermission(context.Context, *connect.Request[admin.UpdatePermissionRequest]) (*connect.Response[admin.PermissionResponse], error)
	DeletePermission(context.Context, *connect.Request[admin.DeletePermissionRequest]) (*connect.Response[admin.DeletePermissionResponse], error)
	ListPermissions(context.Context, *connect.Request[admin.ListPermissionsRequest]) (*connect.Response[admin.ListPermissionsResponse], error)
}

// NewPermissionServiceClient constructs a client for the yourapp.admin.PermissionService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPermissionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PermissionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	permissionServiceMethods := admin.File_admin_permission_service_proto.Services().ByName("PermissionService").Methods()
	return &permissionServiceClient{
		createPermission: connect.NewClient[admin.CreatePermissionRequest, admin.PermissionResponse](
			httpClient,
			baseURL+PermissionServiceCreatePermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("CreatePermission")),
			connect.WithClientOptions(opts...),
		),
		getPermission: connect.NewClient[admin.GetPermissionRequest, admin.PermissionResponse](
			httpClient,
			baseURL+PermissionServiceGetPermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("GetPermission")),
			connect.WithClientOptions(opts...),
		),
		updatePermission: connect.NewClient[admin.UpdatePermissionRequest, admin.PermissionResponse](
			httpClient,
			baseURL+PermissionServiceUpdatePermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("UpdatePermission")),
			connect.WithClientOptions(opts...),
		),
		deletePermission: connect.NewClient[admin.DeletePermissionRequest, admin.DeletePermissionResponse](
			httpClient,
			baseURL+PermissionServiceDeletePermissionProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("DeletePermission")),
			connect.WithClientOptions(opts...),
		),
		listPermissions: connect.NewClient[admin.ListPermissionsRequest, admin.ListPermissionsResponse](
			httpClient,
			baseURL+PermissionServiceListPermissionsProcedure,
			connect.WithSchema(permissionServiceMethods.ByName("ListPermissions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// permissionServiceClient implements PermissionServiceClient.
type permissionServiceClient struct {
	createPermission *connect.Client[admin.CreatePermissionRequest, admin.PermissionResponse]
	getPermission    *connect.Client[admin.GetPermissionRequest, admin.PermissionResponse]
	updatePermission *connect.Client[admin.UpdatePermissionRequest, admin.PermissionResponse]
	deletePermission *connect.Client[admin.DeletePermissionRequest, admin.DeletePermissionResponse]
	listPermissions  *connect.Client[admin.ListPermissionsRequest, admin.ListPermissionsResponse]
}

// CreatePermission calls yourapp.admin.PermissionService.CreatePermission.
func (c *permissionServiceClient) CreatePermission(ctx context.Context, req *connect.Request[admin.CreatePermissionRequest]) (*connect.Response[admin.PermissionResponse], error) {
	return c.createPermission.CallUnary(ctx, req)
}

// GetPermission calls yourapp.admin.PermissionService.GetPermission.
func (c *permissionServiceClient) GetPermission(ctx context.Context, req *connect.Request[admin.GetPermissionRequest]) (*connect.Response[admin.PermissionResponse], error) {
	return c.getPermission.CallUnary(ctx, req)
}

// UpdatePermission calls yourapp.admin.PermissionService.UpdatePermission.
func (c *permissionServiceClient) UpdatePermission(ctx context.Context, req *connect.Request[admin.UpdatePermissionRequest]) (*connect.Response[admin.PermissionResponse], error) {
	return c.updatePermission.CallUnary(ctx, req)
}

// DeletePermission calls yourapp.admin.PermissionService.DeletePermission.
func (c *permissionServiceClient) DeletePermission(ctx context.Context, req *connect.Request[admin.DeletePermissionRequest]) (*connect.Response[admin.DeletePermissionResponse], error) {
	return c.deletePermission.CallUnary(ctx, req)
}

// ListPermissions calls yourapp.admin.PermissionService.ListPermissions.
func (c *permissionServiceClient) ListPermissions(ctx context.Context, req *connect.Request[admin.ListPermissionsRequest]) (*connect.Response[admin.ListPermissionsResponse], error) {
	return c.listPermissions.CallUnary(ctx, req)
}

// PermissionServiceHandler is an implementation of the yourapp.admin.PermissionService service.
type PermissionServiceHandler interface {
	CreatePermission(context.Context, *connect.Request[admin.CreatePermissionRequest]) (*connect.Response[admin.PermissionResponse], error)
	GetPermission(context.Context, *connect.Request[admin.GetPermissionRequest]) (*connect.Response[admin.PermissionResponse], error)
	UpdatePermission(context.Context, *connect.Request[admin.UpdatePermissionRequest]) (*connect.Response[admin.PermissionResponse], error)
	DeletePermission(context.Context, *connect.Request[admin.DeletePermissionRequest]) (*connect.Response[admin.DeletePermissionResponse], error)
	ListPermissions(context.Context, *connect.Request[admin.ListPermissionsRequest]) (*connect.Response[admin.ListPermissionsResponse], error)
}

// NewPermissionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPermissionServiceHandler(svc PermissionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	permissionServiceMethods := admin.File_admin_permission_service_proto.Services().ByName("PermissionService").Methods()
	permissionServiceCreatePermissionHandler := connect.NewUnaryHandler(
		PermissionServiceCreatePermissionProcedure,
		svc.CreatePermission,
		connect.WithSchema(permissionServiceMethods.ByName("CreatePermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceGetPermissionHandler := connect.NewUnaryHandler(
		PermissionServiceGetPermissionProcedure,
		svc.GetPermission,
		connect.WithSchema(permissionServiceMethods.ByName("GetPermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceUpdatePermissionHandler := connect.NewUnaryHandler(
		PermissionServiceUpdatePermissionProcedure,
		svc.UpdatePermission,
		connect.WithSchema(permissionServiceMethods.ByName("UpdatePermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceDeletePermissionHandler := connect.NewUnaryHandler(
		PermissionServiceDeletePermissionProcedure,
		svc.DeletePermission,
		connect.WithSchema(permissionServiceMethods.ByName("DeletePermission")),
		connect.WithHandlerOptions(opts...),
	)
	permissionServiceListPermissionsHandler := connect.NewUnaryHandler(
		PermissionServiceListPermissionsProcedure,
		svc.ListPermissions,
		connect.WithSchema(permissionServiceMethods.ByName("ListPermissions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/yourapp.admin.PermissionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PermissionServiceCreatePermissionProcedure:
			permissionServiceCreatePermissionHandler.ServeHTTP(w, r)
		case PermissionServiceGetPermissionProcedure:
			permissionServiceGetPermissionHandler.ServeHTTP(w, r)
		case PermissionServiceUpdatePermissionProcedure:
			permissionServiceUpdatePermissionHandler.ServeHTTP(w, r)
		case PermissionServiceDeletePermissionProcedure:
			permissionServiceDeletePermissionHandler.ServeHTTP(w, r)
		case PermissionServiceListPermissionsProcedure:
			permissionServiceListPermissionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPermissionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPermissionServiceHandler struct{}

func (UnimplementedPermissionServiceHandler) CreatePermission(context.Context, *connect.Request[admin.CreatePermissionRequest]) (*connect.Response[admin.PermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.admin.PermissionService.CreatePermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) GetPermission(context.Context, *connect.Request[admin.GetPermissionRequest]) (*connect.Response[admin.PermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.admin.PermissionService.GetPermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) UpdatePermission(context.Context, *connect.Request[admin.UpdatePermissionRequest]) (*connect.Response[admin.PermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.admin.PermissionService.UpdatePermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) DeletePermission(context.Context, *connect.Request[admin.DeletePermissionRequest]) (*connect.Response[admin.DeletePermissionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.admin.PermissionService.DeletePermission is not implemented"))
}

func (UnimplementedPermissionServiceHandler) ListPermissions(context.Context, *connect.Request[admin.ListPermissionsRequest]) (*connect.Response[admin.ListPermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("yourapp.admin.PermissionService.ListPermissions is not implemented"))
}
